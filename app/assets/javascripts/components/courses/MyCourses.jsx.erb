class MyCourses extends React.Component{

    constructor(props) {
        super(props);
        this.state = {
            search: '',
            modalState: false,
            event_target: null,
            courseName: '',
            courseId: ''
        };

        this.showModal = this.showModal.bind(this);
        this.handleUnfollow = this.handleUnfollow.bind(this);
        this.buttonUnfollowClicked = this.buttonUnfollowClicked.bind(this);
    }



    updateSearch(event){
        this.setState({search: event.target.value.substr(0,20)});
    }

    showModal() {
        this.setState((prev, props) => {
            const newState = !prev.modalState;

            return { modalState: newState };
        });
    }

    closeModal() {
        this.setState({modalState: false});
    }



    handleUnfollow() {
        let myHeaders = new Headers();
        myHeaders.append('X-CSRF-Token', Rails.csrfToken());

        const deleteCourse = this.props.deleteCourse;
        const id = this.state.courseId;

        const data = new FormData(this.state.event_target); // event.target gives you the native DOMNode

        const options = {
            method: 'PUT',
            headers: myHeaders,
            credentials: 'same-origin',
            body: (data),
        };

        const request = new Request('/unfollow', options);

        fetch(request)
            .then(function () {
                deleteCourse(id);
            })
            .catch(error => console.log(error));

        this.closeModal();
    }


    buttonUnfollowClicked(event){
        event.preventDefault(); //blocca comportamento predefinito: reload pagina e cancellazione di tutto
        this.setState({event_target: event.target, courseName: event.target[1].name, courseId: event.target[1].value},
            () => this.showModal());
    }






    render(){
        let filteredCourses = [];
        if (this.props.message === '')
            filteredCourses = this.props.courses.filter((item) => {
                    return item.name.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1; //tutti
                }
            );
        else{
            return (<div className={"message is-danger gap"}  >
                        <div className="message-body">
                            {this.props.message }
                        </div>
                    </div>);
        }

        const divStyle = {
            backgroundColor: 'white',
        };

        let buttonNext;
        if (this.props.page !== this.props.last_page && !this.props.disabledNext && this.state.search===''){
            buttonNext= <button className='button is-rounded is-info' onClick={() => this.props.onChangePage()}>
                <span> Next </span> </button>
        }
        else {
            buttonNext=<button className='button is-rounded is-info disabled'>Next</button>
        }

        let items = filteredCourses.map((item) => {

            /*if (item.teachers.length ===0){
                return "seeds from course "+item.id+" teachers sono ancora da fare"
            }*/

            /*let teachers = item.teachers.map( teacher => {
                return (
                    <li key={teacher.link_cv}>
                        <a href={teacher.link_cv}> {teacher.surname} {teacher.name}</a>
                    </li>
                )
            } );*/



            //bisognerebbe fare tornare direttamente dal controller l'array ordinato con limit 1 per l'anno di teacher courses (migliori prestazioni)
            return(
                <div key={item.id} className={'box relative is-marginless course-card'}>
                    <div className="my-nested infinite-item">
                        <h3 className="title" id="course-name-second"><a href={"/courses/"+item.id}>{item.name}</a></h3>
                        <div><strong>Livello:</strong> {item.degreet}</div>
                        <div><strong>Corso:</strong> {item.degreen}</div>
                        <div><strong>Anno:</strong> {item.year}</div>
                        {/* <div><strong>Professori:</strong>
                            <courses-ol>{teachers}</courses-ol>
                        </div> */}
                    </div>
                    <div className="my-absolute">
                        <form onSubmit={ (e)=>this.buttonUnfollowClicked(e) }>
                            <input className="input" name="user_course[course_id]" value={item.id} type="hidden" />
                            <div className="grid-buttons">
                                <a className="button is-rounded" href={ "/resources/" + item.id }>Documenti</a>
                                <a className="button is-rounded" href={ "/publications/" + item.id }>Bacheca</a>
                                <button name={ item.name }  className="button is-rounded is-danger" value={ item.id}>
                                    <div>Smetti di seguire</div>
                                </button>
                            </div>
                        </form>
                    </div>

                </div>
            )
        });

        if (this.props.show_plus)
            items = <div className={'box relative is-marginless course-card plus-card'}>
              <a href="/allcourses?per_page=10">
                <figure class="image is-64x64">
                  <%= image_tag "plus-course.png" %>
                </figure>
                <p>Inizia a seguire un corso</p>
              </a>
            </div>

        return(
            <div className='myColumn-lg container' id="modal">
                <hr className='gap'/>
                <div className="wrapper infinite-container">{items}</div>
                <div className='row next-button'>
                    { buttonNext }
                    { /*<input className='input-form gap' type="text"  value={this.state.search}
                           onChange={this.updateSearch.bind(this)} placeholder="Filter courses by name"/> */ }
                </div>

                <div className={"modal " + (this.state.modalState ? "is-active" : "")}>
                    <div className="modal-background" onClick={this.closeModal.bind(this)} />
                    <div className="modal-content">
                        <div className={"box"}>
                            <article className={"media"}>
                                <div className={"media-left"}>
                                    <figure className="image is-64x64">
                                        <i className="far fa-frown-open fa-4x" />
                                    </figure>
                                </div>
                                <div className={"media-content "}>
                                    <p>
                                        <strong>Sicuro di voler smettere di seguire il corso <span className={"has-text-success"}>{this.state.courseName}</span> !?</strong>
                                        <br/>
                                        <span>Perch√© non rimani per aiutare i tuoi colleghi? :)</span>
                                    </p>
                                    <button className="button is-danger is-rounded" onClick={() => this.handleUnfollow()} >
                                        <span>Smetti di seguire</span>
                                    </button>

                                    <button className="modal-close is-large" aria-label="close"
                                            onClick={this.closeModal.bind(this)} />
                                </div>
                            </article>
                        </div>
                    </div>
                </div>

            </div>
        )
    }

}